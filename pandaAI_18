import math
import random
from kogi_canvas import play_othello

BLACK = 1
WHITE = 2

board = [
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 1, 2, 0, 0],
    [0, 0, 2, 1, 0, 0],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0],
]

def can_place_x_y(board, stone, x, y):
    if board[y][x] != 0:
        return False  # 既に石がある場合は置けない

    opponent = 3 - stone  # 相手の石 (1なら2、2なら1)
    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]

    for dx, dy in directions:
        nx, ny = x + dx, y + dy
        found_opponent = False

        while 0 <= nx < len(board[0]) and 0 <= ny < len(board) and board[ny][nx] == opponent:
            nx += dx
            ny += dy
            found_opponent = True

        if found_opponent and 0 <= nx < len(board[0]) and 0 <= ny < len(board) and board[ny][nx] == stone:
            return True  # 石を置ける条件を満たす

    return False

def random_place(board, stone):
    while True:
        x = random.randint(0, len(board[0]) - 1)
        y = random.randint(0, len(board) - 1)
        if can_place_x_y(board, stone, x, y):
            return x, y

class PandaAI(object):
    def face(self):
        return "🐼"

    def place(self, board, stone):
        x, y = random_place(board, stone)
        return x, y

class SmartAI(object):
    def face(self):
        return "🐼"

    def __init__(self, depth=3):
        self.depth = depth  # 探索の深さ

    def evaluate_board(self, board, stone):
        opponent = 3 - stone
        score = 0

        for y in range(len(board)):
            for x in range(len(board[0])):
                if board[y][x] == stone:
                    score += 1
                    if (x == 0 or x == len(board[0]) - 1) and (y == 0 or y == len(board) - 1):
                        score += 5  # 隅の価値を高める
                elif board[y][x] == opponent:
                    score -= 1
        return score

    def get_valid_moves(self, board, stone):
        moves = []
        for y in range(len(board)):
            for x in range(len(board[0])):
                if can_place_x_y(board, stone, x, y):
                    moves.append((x, y))
        return moves

    def make_move(self, board, stone, x, y):
        new_board = [row[:] for row in board]  # ボードのコピー
        opponent = 3 - stone
        directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
        new_board[y][x] = stone

        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            stones_to_flip = []

            while 0 <= nx < len(board[0]) and 0 <= ny < len(board) and new_board[ny][nx] == opponent:
                stones_to_flip.append((nx, ny))
                nx += dx
                ny += dy

            if 0 <= nx < len(board[0]) and 0 <= ny < len(board) and new_board[ny][nx] == stone:
                for flip_x, flip_y in stones_to_flip:
                    new_board[flip_y][flip_x] = stone

        return new_board

    def alphabeta(self, board, stone, depth, alpha, beta, maximizing_player):
        if depth == 0 or not can_place(board, stone):
            return self.evaluate_board(board, stone), None

        best_move = None
        valid_moves = self.get_valid_moves(board, stone)

        if maximizing_player:
            max_eval = -math.inf
            for move in valid_moves:
                new_board = self.make_move(board, stone, move[0], move[1])
                eval, _ = self.alphabeta(new_board, 3 - stone, depth - 1, alpha, beta, False)
                if eval > max_eval:
                    max_eval = eval
                    best_move = move
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
            return max_eval, best_move
        else:
            min_eval = math.inf
            for move in valid_moves:
                new_board = self.make_move(board, stone, move[0], move[1])
                eval, _ = self.alphabeta(new_board, 3 - stone, depth - 1, alpha, beta, True)
                if eval < min_eval:
                    min_eval = eval
                    best_move = move
                beta = min(beta, eval)
                if beta <= alpha:
                    break
            return min_eval, best_move

    def place(self, board, stone):
        _, best_move = self.alphabeta(board, stone, self.depth, -math.inf, math.inf, True)
        return best_move

class CornerPriorityAI(SmartAI):
    def place(self, board, stone):
        valid_moves = self.get_valid_moves(board, stone)

        # 隅を優先
        for move in valid_moves:
            if move in [(0, 0), (0, 5), (5, 0), (5, 5)]:
                return move

        # 最良の手を選択
        best_score = -float("inf")
        best_move = None
        for move in valid_moves:
            temp_board = self.make_move(board, stone, move[0], move[1])
            score = self.evaluate_board(temp_board, stone)
            if score > best_score:
                best_score = score
                best_move = move

        return best_move

# ここで1回だけplay_othelloを呼び出してAIを実行します。
play_othello(CornerPriorityAI())  # 例としてCornerPriorityAIを使用しています
